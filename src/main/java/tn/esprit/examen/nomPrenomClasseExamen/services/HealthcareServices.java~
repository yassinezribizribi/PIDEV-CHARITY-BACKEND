package tn.esprit.examen.nomPrenomClasseExamen.services;

import jakarta.transaction.Transactional;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import tn.esprit.examen.nomPrenomClasseExamen.dto.HealthcareDTO;
import tn.esprit.examen.nomPrenomClasseExamen.dto.NotificationDTO;
import tn.esprit.examen.nomPrenomClasseExamen.entities.Healthcare;
import tn.esprit.examen.nomPrenomClasseExamen.entities.HealthcareStatus;
import tn.esprit.examen.nomPrenomClasseExamen.entities.Subscriber;
import tn.esprit.examen.nomPrenomClasseExamen.Repositories.HealthcareRepository;
import tn.esprit.examen.nomPrenomClasseExamen.Repositories.SubscriberRepository;

import java.util.Date;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
public class HealthcareServices implements IHealthcareServices {

    @Autowired
    private HealthcareRepository healthcareRepository;

    @Autowired
    private SubscriberRepository subscriberRepository;
    @Autowired
    private NotificationService notificationService;

    // ‚úÖ Ajouter un soin
    @Transactional
    @Override
    public Healthcare addHealthcare(HealthcareDTO healthcareDTO) {
        // ‚úÖ V√©rifier si le patient existe
        Subscriber subscriber = subscriberRepository.findById(healthcareDTO.getSubscriberId())
                .orElseThrow(() -> new RuntimeException("‚ùå Patient (Subscriber) non trouv√© !"));

        Healthcare healthcare = new Healthcare();
        healthcare.setSubscriber(subscriber); // ‚úÖ Associe le patient
        healthcare.setStatus(HealthcareStatus.PENDING);
        healthcare.setHistory(healthcareDTO.getHistory());
        healthcare.setBookingDate(healthcareDTO.getBookingDate()); // ‚úÖ BookingDate est d√©j√† un Date

        return healthcareRepository.save(healthcare);
    }

    // ‚úÖ Modifier un soin

    @Transactional
    public Healthcare updateHealthcare(Long id, HealthcareDTO healthcareDTO) {
        Healthcare healthcare = healthcareRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("‚ùå Traitement non trouv√© !"));

        healthcare.setHistory(healthcareDTO.getHistory());
        healthcare.setBookingDate(healthcareDTO.getBookingDate());

        // ‚úÖ Conversion String -> Enum
        healthcare.setStatus(HealthcareStatus.valueOf(healthcareDTO.getStatus().toUpperCase()));

        Healthcare updatedHealthcare = healthcareRepository.save(healthcare);

        // ‚úÖ Envoi de notification apr√®s mise √† jour
        NotificationDTO notificationDTO = new NotificationDTO();
        notificationDTO.setSubscriberId(healthcare.getSubscriber().getIdUser());
        notificationDTO.setMessage("üì¢ Votre rendez-vous a √©t√© mis √† jour : "
                + "Nouvelle date : " + healthcareDTO.getBookingDate()
                + ", Statut : " + healthcareDTO.getStatus());

        notificationService.addNotification(notificationDTO);

        return updatedHealthcare;
    }

    // ‚úÖ Modifier uniquement le statut et la date
    @Transactional
    @Override
    public Healthcare updateHealthcareStatus(Long healthcareId, String status, Date bookingDate) {
        Healthcare healthcare = healthcareRepository.findById(healthcareId)
                .orElseThrow(() -> new RuntimeException("‚ùå Soin non trouv√© !"));

        try {
            HealthcareStatus newStatus = HealthcareStatus.valueOf(status.toUpperCase());
            healthcare.setStatus(newStatus);
            healthcare.setBookingDate(bookingDate); // ‚úÖ BookingDate est d√©j√† un Date

            return healthcareRepository.save(healthcare);
        } catch (IllegalArgumentException e) {
            throw new RuntimeException("‚ùå Statut invalide ! Utilisez PENDING, IN_PROGRESS ou COMPLETED.");
        }
    }

    // ‚úÖ Supprimer un soin
    @Transactional
    @Override
    public void deleteHealthcare(Long id) {
        if (!healthcareRepository.existsById(id)) {
            throw new RuntimeException("‚ùå Traitement non trouv√© !");
        }
        healthcareRepository.deleteById(id);
    }

    // ‚úÖ R√©cup√©rer un soin par ID
    @Override
    public Optional<Healthcare> getHealthcareById(Long id) {
        return healthcareRepository.findById(id);
    }

    // ‚úÖ R√©cup√©rer tous les soins
    @Override
    public List<Healthcare> getAllHealthcare() {
        return healthcareRepository.findAll();
    }
}
