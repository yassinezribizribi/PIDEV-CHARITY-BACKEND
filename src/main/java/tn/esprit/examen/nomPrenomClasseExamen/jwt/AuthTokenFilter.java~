package tn.esprit.examen.nomPrenomClasseExamen.jwt;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;
import tn.esprit.examen.nomPrenomClasseExamen.services.SubscriberDetailsServiceImpl;

import java.io.IOException;

@Component
public class AuthTokenFilter extends OncePerRequestFilter {

    private static final Logger logger = LoggerFactory.getLogger(AuthTokenFilter.class);

    private final JwtUtils jwtUtils;
    private final SubscriberDetailsServiceImpl subDetailsService;

    public AuthTokenFilter(JwtUtils jwtUtils, SubscriberDetailsServiceImpl subDetailsService) {
        this.jwtUtils = jwtUtils;
        this.subDetailsService = subDetailsService;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        String requestURI = request.getRequestURI();
        logger.info("üì• Requ√™te intercept√©e : " + requestURI);

        // ‚úÖ Autoriser les routes d'authentification sans filtre
        if (requestURI.startsWith("/api/auth/")) {
            logger.info("üîì Acc√®s autoris√© sans authentification √† : " + requestURI);
            filterChain.doFilter(request, response);
            return;
        }

        try {
            // ‚úÖ Extraction du JWT
            String jwt = parseJwt(request);
            if (jwt == null) {
                logger.warn("‚ö†Ô∏è Aucun token trouv√© dans la requ√™te !");
            } else {
                logger.info("üîç Token extrait : " + jwt);
            }

            // ‚úÖ Validation et authentification
            if (jwt != null && jwtUtils.validateJwtToken(jwt)) {
                // Changer ici pour extraire l'email au lieu du username
                String email = jwtUtils.getUserNameFromJwtToken(jwt); // Assurez-vous que cette m√©thode extrait bien l'email
                logger.info("‚úÖ Token valide pour l'utilisateur avec email : " + email);

                // Charger les d√©tails de l'utilisateur en utilisant l'email
                UserDetails userDetails = subDetailsService.loadUserByUsername(email);
                // Utilisation de l'email au lieu du pr√©nom
                logger.info("******");

                logger.info(userDetails.getAuthorities().toString());

                UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
                        userDetails, jwt, userDetails.getAuthorities());
                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                SecurityContextHolder.getContext().setAuthentication(authentication);
            } else {
                logger.warn("‚õî Token invalide !");
            }

            // ‚úÖ Continuer le filtre seulement si aucune erreur
            filterChain.doFilter(request, response);

        } catch (ExpiredJwtException ex) {
            logger.error("‚ùå Le token JWT a expir√© : {}", ex.getMessage());
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Le token a expir√©.");

        } catch (MalformedJwtException ex) {
            logger.error("‚ùå Token JWT mal form√© : {}", ex.getMessage());
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Token invalide.");

        } catch (Exception e) {
            logger.error("‚ùå Erreur d'authentification : {}", e.getMessage());
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Erreur d'authentification.");
        }
    }


    private String parseJwt(HttpServletRequest request) {
        String headerAuth = request.getHeader("Authorization");

        if (StringUtils.hasText(headerAuth) && headerAuth.startsWith("Bearer ")) {
            return headerAuth.substring(7);
        }

        return null;
    }
}
