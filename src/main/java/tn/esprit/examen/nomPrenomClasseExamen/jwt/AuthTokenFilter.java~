package tn.esprit.examen.nomPrenomClasseExamen.jwt;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;
import tn.esprit.examen.nomPrenomClasseExamen.services.SubscriberDetailsServiceImpl;

import java.io.IOException;

@Component
public class AuthTokenFilter extends OncePerRequestFilter {

    private static final Logger logger = LoggerFactory.getLogger(AuthTokenFilter.class);

    private final JwtUtils jwtUtils;
    private final SubscriberDetailsServiceImpl subDetailsService;

    public AuthTokenFilter(JwtUtils jwtUtils, SubscriberDetailsServiceImpl subDetailsService) {
        this.jwtUtils = jwtUtils;
        this.subDetailsService = subDetailsService;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        String requestURI = request.getRequestURI();
        logger.info("üì• Requ√™te intercept√©e : {}", requestURI);

        // ‚úÖ Autoriser les routes d'authentification sans filtrage JWT
        if (requestURI.startsWith("/api/auth/")) {
            logger.info("üîì Acc√®s autoris√© sans authentification √† : {}", requestURI);
            filterChain.doFilter(request, response);
            return;
        }

        try {
            // ‚úÖ Extraction du JWT
            String jwt = parseJwt(request);
            if (jwt == null) {
                logger.warn("‚ö†Ô∏è Aucun token JWT trouv√© dans la requ√™te !");
                filterChain.doFilter(request, response);
                return;
            }

            logger.info("üîç Token extrait : {}", jwt);

            // ‚úÖ Validation du token
            if (jwtUtils.validateJwtToken(jwt)) {
                // ‚úÖ Extraction de l'identifiant utilisateur
                String userIdentifier = jwtUtils.getUserNameFromJwtToken(jwt);
                logger.info("‚úÖ Token valide pour l'utilisateur : {}", userIdentifier);

                if (userIdentifier == null || userIdentifier.trim().isEmpty() || userIdentifier.equals("0")) {
                    logger.error("‚ùå Le JWT ne contient pas d'identifiant utilisateur valide !");
                    response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Token invalide.");
                    return;
                }

                // ‚úÖ Charger les d√©tails de l'utilisateur via l'identifiant
                UserDetails userDetails = subDetailsService.loadUserByUsername(userIdentifier);

                if (userDetails == null) {
                    logger.error("‚ùå Utilisateur non trouv√© pour l'identifiant : {}", userIdentifier);
                    response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Utilisateur non trouv√©.");
                    return;
                }

                logger.info("‚úÖ Utilisateur authentifi√© avec succ√®s : {}", userDetails.getUsername());

                // ‚úÖ Cr√©er une authentification et mettre √† jour le contexte de s√©curit√©
                UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
                        userDetails, null, userDetails.getAuthorities());
                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                SecurityContextHolder.getContext().setAuthentication(authentication);
            } else {
                logger.warn("‚õî Token invalide !");
                response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Token invalide.");
                return;
            }

        } catch (ExpiredJwtException ex) {
            logger.error("‚ùå Le token JWT a expir√© : {}", ex.getMessage());
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Le token a expir√©.");
            return;
        } catch (MalformedJwtException ex) {
            logger.error("‚ùå Token JWT mal form√© : {}", ex.getMessage());
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Token invalide.");
            return;
        } catch (SignatureException ex) {
            logger.error("‚ùå Signature du JWT invalide : {}", ex.getMessage());
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Signature du token invalide.");
            return;
        } catch (Exception e) {
            logger.error("‚ùå Erreur d'authentification : {}", e.getMessage());
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Erreur d'authentification.");
            return;
        }

        // ‚úÖ Continuer le filtrage
        filterChain.doFilter(request, response);
    }

    /**
     * ‚úÖ Extraire le JWT de l'en-t√™te Authorization
     */
    private String parseJwt(HttpServletRequest request) {
        String headerAuth = request.getHeader("Authorization");

        if (StringUtils.hasText(headerAuth) && headerAuth.startsWith("Bearer ")) {
            return headerAuth.substring(7);
        }

        return null;
    }
}
