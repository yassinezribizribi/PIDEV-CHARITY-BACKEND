package tn.esprit.examen.nomPrenomClasseExamen.entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;
import lombok.experimental.FieldDefaults;

import java.util.List;
import java.util.Set;

@Getter
@Setter
@ToString
@AllArgsConstructor
@NoArgsConstructor
@FieldDefaults(level= AccessLevel.PRIVATE)
@Entity
@Table(name = "subscriber")
public class Subscriber extends User {

    @Enumerated(EnumType.STRING)
    private Role role;  // Peut être REFUGEE, ASSOCIATION_MEMBER, VOLUNTEER (Médecin)

    private String skills;        // Compétences (pour VOLUNTEER)
    private String nationality;   // Pour REFUGEE
    private String expertiseArea; // Pour MENTOR
    private String associationRole; // Pour ASSOCIATION_MEMBER

    private String symptoms;  // ✅ Symptômes décrits par le patient lors de la demande de soin

    @Column(nullable = false)
    private boolean healthcareRequest = false;  // ✅ Indique si ce patient a fait une demande de soin

    @JsonIgnore// ✅ Un patient peut avoir plusieurs soins
    @OneToMany(mappedBy = "subscriber", cascade = CascadeType.ALL)
    private List<Healthcare> healthcareRequests;

    @JsonIgnore// ✅ Un médecin (VOLUNTEER) peut traiter plusieurs patients
    @OneToMany(mappedBy = "doctor", cascade = CascadeType.ALL)
    private List<Healthcare> treatedPatients;

    @OneToMany(mappedBy = "subscriber", cascade = CascadeType.ALL)
    private List<Notification> notifications;

    @OneToMany(cascade = CascadeType.ALL)
    private Set<Animal> animals;

    @ManyToMany(mappedBy="subscribers", cascade = CascadeType.ALL)
    private Set<Donation> donations;

    @ManyToMany(mappedBy="subscribers", cascade = CascadeType.ALL)
    private Set<Training> trainings;

    @ManyToMany(mappedBy="subscribers", cascade = CascadeType.ALL)
    private Set<Forum> forums;

    @OneToMany(mappedBy = "subscriber")
    private List<Crisis> crises; // ✅ Liste des crises signalées par ce subscriber
    @Column(name = "id_user") // ✅ Correspondance exacte avec la BDD
    private Long idUser;
}
